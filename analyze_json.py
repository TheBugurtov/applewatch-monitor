import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
with open("HealthAutoExport-latest.json","r",encoding="utf-8") as f:
    data = json.load(f)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
def percentage(value, min_value, max_value):
    return max(0, min(100, int((value - min_value)/(max_value - min_value)*100)))

# –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
metrics = {m['name']: m['data'][-1]['qty'] for m in data['data']['metrics']}

heart = percentage(metrics.get('heart_rate',70), 60, 100)
sleep = percentage(metrics.get('sleep_analysis',8), 6, 9)
active = percentage(metrics.get('active_energy',400), 300, 1000)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã
advice_list = []
if metrics.get('steps',0) < 4000:
    advice_list.append("–ú–∞–ª–æ —à–∞–≥–æ–≤, –ø—Ä–æ–π–¥–∏—Å—å –≤–µ—á–µ—Ä–æ–º")
if metrics.get('apple_stand_time',0) < 6:
    advice_list.append("–í—Å—Ç–∞–Ω—å —Å –∫—Ä–µ—Å–ª–∞ –Ω–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç")
if metrics.get('sleep_analysis',0) < 6:
    advice_list.append("–ù–µ–¥–æ—Å—ã–ø, –ª—è–≥ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è")

advice = " | ".join(advice_list) if advice_list else "–ó–¥–æ—Ä–æ–≤—å–µ –≤ –ø–æ—Ä—è–¥–∫–µ üëç"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—ã–π JSON –¥–ª—è ESP32
output = {
    "heart_rate": heart,
    "sleep": sleep,
    "active_energy": active,
    "advice": advice
}

with open("latest.json","w",encoding="utf-8") as f:
    json.dump(output,f,ensure_ascii=False)

print("latest.json created!")
