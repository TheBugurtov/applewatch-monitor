import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
with open("HealthAutoExport-latest.json","r",encoding="utf-8") as f:
    data = json.load(f)

metrics = {}

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ qty –∏–ª–∏ Avg/totalSleep
def get_metric_value(m):
    d = m.get("data", [])
    if not d:
        return None
    last = d[-1]
    # 1. qty
    if "qty" in last:
        return last["qty"]
    # 2. value (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if "value" in last:
        return last["value"]
    # 3. sleep_analysis special case
    if m.get("name") == "sleep_analysis":
        return last.get("totalSleep", 0)
    # 4. heart_rate special case
    if m.get("name") == "heart_rate":
        return last.get("Avg", last.get("qty", 0))
    return None

# –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
for m in data.get("data", {}).get("metrics", []):
    metrics[m.get("name","unknown")] = get_metric_value(m)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ %
def percentage(value, min_value, max_value):
    if value is None:
        return 0
    return max(0, min(100, int((value - min_value)/(max_value - min_value)*100)))

# –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ESP
heart = percentage(metrics.get("heart_rate",70), 60, 100)
sleep = percentage(metrics.get("sleep_analysis",7.4), 6, 9)
active = percentage(metrics.get("active_energy",400), 300, 1000)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤
advice = []
if metrics.get("step_count",0) and metrics.get("step_count",0) < 4000:
    advice.append("–ú–∞–ª–æ —à–∞–≥–æ–≤, –ø—Ä–æ–π–¥–∏—Å—å –≤–µ—á–µ—Ä–æ–º")
if metrics.get("apple_stand_time",0) and metrics.get("apple_stand_time",0) < 6:
    advice.append("–í—Å—Ç–∞–Ω—å —Å –∫—Ä–µ—Å–ª–∞ –Ω–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç")
if metrics.get("sleep_analysis",0) and metrics.get("sleep_analysis",0) < 6:
    advice.append("–ù–µ–¥–æ—Å—ã–ø, –ª—è–≥ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è")

advice_text = " | ".join(advice) if advice else "–ó–¥–æ—Ä–æ–≤—å–µ –≤ –ø–æ—Ä—è–¥–∫–µ üëç"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—ã–π JSON –¥–ª—è ESP32
output = {
    "heart_rate": heart,
    "sleep": sleep,
    "active_energy": active,
    "advice": advice_text
}

with open("latest.json","w",encoding="utf-8") as f:
    json.dump(output,f,ensure_ascii=False)

print("latest.json created!")
