import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
with open("HealthAutoExport-latest.json", "r", encoding="utf-8") as f:
    data = json.load(f)

metrics = {}

def get_metric_value(m):
    d = m.get("data", [])
    if not d:
        return None
    
    last = d[-1]
    metric_name = m.get("name")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    if metric_name == "sleep_analysis":
        return last.get("totalSleep")
    elif metric_name == "heart_rate":
        return last.get("Avg")  # –¢–æ–ª—å–∫–æ Avg, –±–µ–∑ fallback –Ω–∞ qty
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º qty
        return last.get("qty")

# –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
for m in data.get("data", {}).get("metrics", []):
    name = m.get("name", "unknown")
    value = get_metric_value(m)
    if value is not None:
        metrics[name] = value

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ % —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
def percentage(value, min_value, max_value):
    if value is None:
        return 0
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0 –∏ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if max_value <= min_value:
        return 50  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return max(0, min(100, int((value - min_value) / (max_value - min_value) * 100)))

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
heart_rate_val = metrics.get("heart_rate")
sleep_val = metrics.get("sleep_analysis") 
active_energy_val = metrics.get("active_energy")

# –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ESP (—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
heart = percentage(heart_rate_val, 60, 100) if heart_rate_val is not None else 50
sleep_goal = 7  # —Ü–µ–ª—å —Å–Ω–∞ 7 —á–∞—Å–æ–≤
sleep = int(min(max(0, sleep_val / sleep_goal * 100), 100)) if sleep_val is not None else 50 
active = percentage(active_energy_val, 300, 1000) if active_energy_val is not None else 50

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å)
advice = []

step_count = metrics.get("step_count")
if step_count is not None and step_count < 4000:
    advice.append("–ú–∞–ª–æ —à–∞–≥–æ–≤, –ø—Ä–æ–π–¥–∏—Å—å –≤–µ—á–µ—Ä–æ–º")

stand_time = metrics.get("apple_stand_time") 
if stand_time is not None and stand_time < 6:
    advice.append("–í—Å—Ç–∞–Ω—å —Å –∫—Ä–µ—Å–ª–∞ –Ω–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç")

sleep_analysis = metrics.get("sleep_analysis")
# –û–±–Ω–æ–≤–∏–ª —Å–æ–≤–µ—Ç –ø–æ —Å–Ω—É - —Ç–µ–ø–µ—Ä—å —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ü–µ–ª—å—é 7 —á–∞—Å–æ–≤
if sleep_analysis is not None and sleep_analysis < sleep_goal:
    advice.append(f"–ù–µ–¥–æ—Å—ã–ø, —Ü–µ–ª—å {sleep_goal}—á")

advice_text = " | ".join(advice) if advice else "–ó–¥–æ—Ä–æ–≤—å–µ –≤ –ø–æ—Ä—è–¥–∫–µ üëç"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
print(f"–ù–∞–π–¥–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: {list(metrics.keys())}")
print(f"–ó–Ω–∞—á–µ–Ω–∏—è: HR={heart_rate_val}, Sleep={sleep_val}, Steps={step_count}")
print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∞: {sleep}% (—Ü–µ–ª—å: {sleep_goal} —á–∞—Å–æ–≤)")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—ã–π JSON –¥–ª—è ESP32
output = {
    "heart_rate": heart,
    "sleep": sleep, 
    "active_energy": active,
    "advice": advice_text
}

with open("latest.json", "w", encoding="utf-8") as f:
    json.dump(output, f, ensure_ascii=False, indent=2)

print("latest.json created successfully!")